
path = require('path')
num_cpus = require('os').cpus().length or 1
async = require('async')
chalk = require('chalk')
spawn = require('win-spawn')
which = require('which')

JS('module.exports') = def(grunt):

    check_binary = def(cmd, msg):
        try:
            which.sync(cmd)
        except:
            return grunt.warn(msg + '\n')

    grunt.registerMultiTask('rapydml', 'Compile rapydml templates.',
    
    def():

        cb = this.async()
        options = this.options(
            {
                attribution: False,
                html5: False,
                any: False,
                html: False
            }
        )
        
        check_binary('rapydml', 'You need to have rapydml installed.')
        
        async.eachLimit(this.files, num_cpus,
        
        def(file, next):
            src = file.src[0]
            
            if typeof src is not 'string':
                src = file.orig.src[0]

            if not grunt.file.exists(src):
                grunt.log.warn('Source file' + src + 'not found.')
                return next()
            
            if path.basename(src)[0] is '_':
                return next()

            input = path.join(process.cwd(), src)
            
            args = [input]
            
            if not options.attribution:
                args.push('--no-acknowledgement')
            
            if options.html5:
                args.push('--html5')
            
            if options.any:
                args.push('--any')
            
            if options.html:
                args.push('--html')
            
            bin = 'rapydml'

            grunt.verbose.writeln('Command: ' + bin + ' ' + args.join(' '))
            
            cp = spawn(bin, args, {stdio: 'inherit'})

            cp.on('error',
            def(err): grunt.warn(err)
            )
            
            cp.on('close',
            def(code):
                if code > 0:
                    return grunt.warn('Exited with error code ' + code)
                
                grunt.verbose.writeln('File ' + chalk.cyan(file.dest) + ' created.')
                next()
            )
        , cb)
    
    )

